/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from "./routes/__root";
import { Route as LoginImport } from "./routes/login";
import { Route as authenticatedImport } from "./routes/__authenticated";
import { Route as IndexImport } from "./routes/index";
import { Route as authenticatedProfileImport } from "./routes/__authenticated/profile";
import { Route as authenticatedHomeImport } from "./routes/__authenticated/home";
import { Route as authenticatedApisImport } from "./routes/__authenticated/apis";

// Create/Update Routes

const LoginRoute = LoginImport.update({
	id: "/login",
	path: "/login",
	getParentRoute: () => rootRoute,
} as any);

const authenticatedRoute = authenticatedImport.update({
	id: "/__authenticated",
	getParentRoute: () => rootRoute,
} as any);

const IndexRoute = IndexImport.update({
	id: "/",
	path: "/",
	getParentRoute: () => rootRoute,
} as any);

const authenticatedProfileRoute = authenticatedProfileImport.update({
	id: "/profile",
	path: "/profile",
	getParentRoute: () => authenticatedRoute,
} as any);

const authenticatedHomeRoute = authenticatedHomeImport.update({
	id: "/home",
	path: "/home",
	getParentRoute: () => authenticatedRoute,
} as any);

const authenticatedApisRoute = authenticatedApisImport.update({
	id: "/apis",
	path: "/apis",
	getParentRoute: () => authenticatedRoute,
} as any);

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
	interface FileRoutesByPath {
		"/": {
			id: "/";
			path: "/";
			fullPath: "/";
			preLoaderRoute: typeof IndexImport;
			parentRoute: typeof rootRoute;
		};
		"/__authenticated": {
			id: "/__authenticated";
			path: "";
			fullPath: "";
			preLoaderRoute: typeof authenticatedImport;
			parentRoute: typeof rootRoute;
		};
		"/login": {
			id: "/login";
			path: "/login";
			fullPath: "/login";
			preLoaderRoute: typeof LoginImport;
			parentRoute: typeof rootRoute;
		};
		"/__authenticated/apis": {
			id: "/__authenticated/apis";
			path: "/apis";
			fullPath: "/apis";
			preLoaderRoute: typeof authenticatedApisImport;
			parentRoute: typeof authenticatedImport;
		};
		"/__authenticated/home": {
			id: "/__authenticated/home";
			path: "/home";
			fullPath: "/home";
			preLoaderRoute: typeof authenticatedHomeImport;
			parentRoute: typeof authenticatedImport;
		};
		"/__authenticated/profile": {
			id: "/__authenticated/profile";
			path: "/profile";
			fullPath: "/profile";
			preLoaderRoute: typeof authenticatedProfileImport;
			parentRoute: typeof authenticatedImport;
		};
	}
}

// Create and export the route tree

interface authenticatedRouteChildren {
	authenticatedApisRoute: typeof authenticatedApisRoute;
	authenticatedHomeRoute: typeof authenticatedHomeRoute;
	authenticatedProfileRoute: typeof authenticatedProfileRoute;
}

const authenticatedRouteChildren: authenticatedRouteChildren = {
	authenticatedApisRoute: authenticatedApisRoute,
	authenticatedHomeRoute: authenticatedHomeRoute,
	authenticatedProfileRoute: authenticatedProfileRoute,
};

const authenticatedRouteWithChildren = authenticatedRoute._addFileChildren(
	authenticatedRouteChildren,
);

export interface FileRoutesByFullPath {
	"/": typeof IndexRoute;
	"": typeof authenticatedRouteWithChildren;
	"/login": typeof LoginRoute;
	"/apis": typeof authenticatedApisRoute;
	"/home": typeof authenticatedHomeRoute;
	"/profile": typeof authenticatedProfileRoute;
}

export interface FileRoutesByTo {
	"/": typeof IndexRoute;
	"": typeof authenticatedRouteWithChildren;
	"/login": typeof LoginRoute;
	"/apis": typeof authenticatedApisRoute;
	"/home": typeof authenticatedHomeRoute;
	"/profile": typeof authenticatedProfileRoute;
}

export interface FileRoutesById {
	__root__: typeof rootRoute;
	"/": typeof IndexRoute;
	"/__authenticated": typeof authenticatedRouteWithChildren;
	"/login": typeof LoginRoute;
	"/__authenticated/apis": typeof authenticatedApisRoute;
	"/__authenticated/home": typeof authenticatedHomeRoute;
	"/__authenticated/profile": typeof authenticatedProfileRoute;
}

export interface FileRouteTypes {
	fileRoutesByFullPath: FileRoutesByFullPath;
	fullPaths: "/" | "" | "/login" | "/apis" | "/home" | "/profile";
	fileRoutesByTo: FileRoutesByTo;
	to: "/" | "" | "/login" | "/apis" | "/home" | "/profile";
	id:
		| "__root__"
		| "/"
		| "/__authenticated"
		| "/login"
		| "/__authenticated/apis"
		| "/__authenticated/home"
		| "/__authenticated/profile";
	fileRoutesById: FileRoutesById;
}

export interface RootRouteChildren {
	IndexRoute: typeof IndexRoute;
	authenticatedRoute: typeof authenticatedRouteWithChildren;
	LoginRoute: typeof LoginRoute;
}

const rootRouteChildren: RootRouteChildren = {
	IndexRoute: IndexRoute,
	authenticatedRoute: authenticatedRouteWithChildren,
	LoginRoute: LoginRoute,
};

export const routeTree = rootRoute
	._addFileChildren(rootRouteChildren)
	._addFileTypes<FileRouteTypes>();

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/__authenticated",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/__authenticated": {
      "filePath": "__authenticated.tsx",
      "children": [
        "/__authenticated/apis",
        "/__authenticated/home",
        "/__authenticated/profile"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/__authenticated/apis": {
      "filePath": "__authenticated/apis.tsx",
      "parent": "/__authenticated"
    },
    "/__authenticated/home": {
      "filePath": "__authenticated/home.tsx",
      "parent": "/__authenticated"
    },
    "/__authenticated/profile": {
      "filePath": "__authenticated/profile.tsx",
      "parent": "/__authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
